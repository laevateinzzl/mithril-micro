// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 68ba2c3132
// Version Date: 2021-06-08T17:59:18Z

// Package grpc provides a gRPC client for the VideoService service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "mithril-micro/vsrv/pb"
	"mithril-micro/vsrv/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.VideoServiceServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var createvideoEndpoint endpoint.Endpoint
	{
		createvideoEndpoint = grpctransport.NewClient(
			conn,
			"pb.VideoService",
			"CreateVideo",
			EncodeGRPCCreateVideoRequest,
			DecodeGRPCCreateVideoResponse,
			pb.Video{},
			clientOptions...,
		).Endpoint()
	}

	var getvideoEndpoint endpoint.Endpoint
	{
		getvideoEndpoint = grpctransport.NewClient(
			conn,
			"pb.VideoService",
			"GetVideo",
			EncodeGRPCGetVideoRequest,
			DecodeGRPCGetVideoResponse,
			pb.Video{},
			clientOptions...,
		).Endpoint()
	}

	var getvideolistEndpoint endpoint.Endpoint
	{
		getvideolistEndpoint = grpctransport.NewClient(
			conn,
			"pb.VideoService",
			"GetVideoList",
			EncodeGRPCGetVideoListRequest,
			DecodeGRPCGetVideoListResponse,
			pb.GetVideoListRes{},
			clientOptions...,
		).Endpoint()
	}

	var updatevideoEndpoint endpoint.Endpoint
	{
		updatevideoEndpoint = grpctransport.NewClient(
			conn,
			"pb.VideoService",
			"UpdateVideo",
			EncodeGRPCUpdateVideoRequest,
			DecodeGRPCUpdateVideoResponse,
			pb.UpdateVideoRes{},
			clientOptions...,
		).Endpoint()
	}

	var deletevideoEndpoint endpoint.Endpoint
	{
		deletevideoEndpoint = grpctransport.NewClient(
			conn,
			"pb.VideoService",
			"DeleteVideo",
			EncodeGRPCDeleteVideoRequest,
			DecodeGRPCDeleteVideoResponse,
			pb.DeleteVideoRes{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		CreateVideoEndpoint:  createvideoEndpoint,
		GetVideoEndpoint:     getvideoEndpoint,
		GetVideoListEndpoint: getvideolistEndpoint,
		UpdateVideoEndpoint:  updatevideoEndpoint,
		DeleteVideoEndpoint:  deletevideoEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCCreateVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createvideo reply to a user-domain createvideo response. Primarily useful in a client.
func DecodeGRPCCreateVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Video)
	return reply, nil
}

// DecodeGRPCGetVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getvideo reply to a user-domain getvideo response. Primarily useful in a client.
func DecodeGRPCGetVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Video)
	return reply, nil
}

// DecodeGRPCGetVideoListResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getvideolist reply to a user-domain getvideolist response. Primarily useful in a client.
func DecodeGRPCGetVideoListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetVideoListRes)
	return reply, nil
}

// DecodeGRPCUpdateVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatevideo reply to a user-domain updatevideo response. Primarily useful in a client.
func DecodeGRPCUpdateVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateVideoRes)
	return reply, nil
}

// DecodeGRPCDeleteVideoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletevideo reply to a user-domain deletevideo response. Primarily useful in a client.
func DecodeGRPCDeleteVideoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.DeleteVideoRes)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCCreateVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createvideo request to a gRPC createvideo request. Primarily useful in a client.
func EncodeGRPCCreateVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateVideoReq)
	return req, nil
}

// EncodeGRPCGetVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getvideo request to a gRPC getvideo request. Primarily useful in a client.
func EncodeGRPCGetVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetVideoReq)
	return req, nil
}

// EncodeGRPCGetVideoListRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getvideolist request to a gRPC getvideolist request. Primarily useful in a client.
func EncodeGRPCGetVideoListRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetVideoListReq)
	return req, nil
}

// EncodeGRPCUpdateVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatevideo request to a gRPC updatevideo request. Primarily useful in a client.
func EncodeGRPCUpdateVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateVideoReq)
	return req, nil
}

// EncodeGRPCDeleteVideoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletevideo request to a gRPC deletevideo request. Primarily useful in a client.
func EncodeGRPCDeleteVideoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteVideoReq)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
