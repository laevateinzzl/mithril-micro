// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: fcd9ff140d
// Version Date: 2021-07-14T06:36:40Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "mithril-micro/usrv/pb"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC UserServiceServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.UserServiceServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// userservice

		createuser: grpctransport.NewServer(
			endpoints.CreateUserEndpoint,
			DecodeGRPCCreateUserRequest,
			EncodeGRPCCreateUserResponse,
			serverOptions...,
		),
		getuser: grpctransport.NewServer(
			endpoints.GetUserEndpoint,
			DecodeGRPCGetUserRequest,
			EncodeGRPCGetUserResponse,
			serverOptions...,
		),
		updateuser: grpctransport.NewServer(
			endpoints.UpdateUserEndpoint,
			DecodeGRPCUpdateUserRequest,
			EncodeGRPCUpdateUserResponse,
			serverOptions...,
		),
		login: grpctransport.NewServer(
			endpoints.LoginEndpoint,
			DecodeGRPCLoginRequest,
			EncodeGRPCLoginResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the UserServiceServer interface
type grpcServer struct {
	createuser grpctransport.Handler
	getuser    grpctransport.Handler
	updateuser grpctransport.Handler
	login      grpctransport.Handler
}

// Methods for grpcServer to implement UserServiceServer interface

func (s *grpcServer) CreateUser(ctx context.Context, req *pb.CreateUserReq) (*pb.CreateUserRes, error) {
	_, rep, err := s.createuser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateUserRes), nil
}

func (s *grpcServer) GetUser(ctx context.Context, req *pb.GetUserReq) (*pb.User, error) {
	_, rep, err := s.getuser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.User), nil
}

func (s *grpcServer) UpdateUser(ctx context.Context, req *pb.UpdateUserReq) (*pb.UpdateUserRes, error) {
	_, rep, err := s.updateuser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UpdateUserRes), nil
}

func (s *grpcServer) Login(ctx context.Context, req *pb.LoginReq) (*pb.LoginRes, error) {
	_, rep, err := s.login.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.LoginRes), nil
}

// Server Decode

// DecodeGRPCCreateUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC createuser request to a user-domain createuser request. Primarily useful in a server.
func DecodeGRPCCreateUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateUserReq)
	return req, nil
}

// DecodeGRPCGetUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getuser request to a user-domain getuser request. Primarily useful in a server.
func DecodeGRPCGetUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetUserReq)
	return req, nil
}

// DecodeGRPCUpdateUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC updateuser request to a user-domain updateuser request. Primarily useful in a server.
func DecodeGRPCUpdateUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateUserReq)
	return req, nil
}

// DecodeGRPCLoginRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC login request to a user-domain login request. Primarily useful in a server.
func DecodeGRPCLoginRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LoginReq)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain createuser response to a gRPC createuser reply. Primarily useful in a server.
func EncodeGRPCCreateUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateUserRes)
	return resp, nil
}

// EncodeGRPCGetUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getuser response to a gRPC getuser reply. Primarily useful in a server.
func EncodeGRPCGetUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.User)
	return resp, nil
}

// EncodeGRPCUpdateUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain updateuser response to a gRPC updateuser reply. Primarily useful in a server.
func EncodeGRPCUpdateUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UpdateUserRes)
	return resp, nil
}

// EncodeGRPCLoginResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain login response to a gRPC login reply. Primarily useful in a server.
func EncodeGRPCLoginResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.LoginRes)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
